global
    daemon
    maxconn 4096
    log stdout local0
    # stats socket /var/run/haproxy.sock mode 660 level admin
    tune.ssl.default-dh-param 2048
    # Enable Lua for request manipulation
    lua-load /etc/haproxy/tokenize.lua

defaults
    mode http
    timeout connect 5s
    timeout client 30s
    timeout server 30s
    option httplog
    option dontlognull
    option forwardfor
    option http-server-close
    log global

# Frontend - Entry point for all requests to your application
frontend tokenshield_frontend
    bind *:443 ssl crt /etc/haproxy/certs/server.pem
    bind *:80
    
    # Force HTTPS for security (disabled for testing)
    # redirect scheme https if !{ ssl_fc }
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    
    # Capture request body for processing
    option http-buffer-request
    
    # Process requests through Lua script to detect and tokenize card data
    http-request lua.tokenize_request
    
    # Route all requests to the tokenizer backend first
    default_backend tokenizer_backend

# Backend - Tokenizer service
backend tokenizer_backend
    # The tokenizer will process the request and forward to your app
    server tokenizer1 tokenizer:8080 check inter 2s rise 2 fall 3

# Your actual application backend (receives tokenized requests)
backend app_backend
    # This is where tokenized requests are forwarded
    server app1 dummy-ecommerce-app:8000 check inter 2s rise 2 fall 3

# Statistics
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
