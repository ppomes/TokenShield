#!/bin/bash

echo "
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          TokenShield - Quick Start                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo

# Check if .env exists
if [ ! -f .env ]; then
    echo "Creating .env file..."
    cp .env.example .env
    
    # Generate encryption key
    # Try with python3, fallback to a static key if cryptography is not installed
    ENCRYPTION_KEY=$(python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())" 2>/dev/null || echo "zN0Lh6WCqsFg6p77l8k_TL-tZCLbRxqJufRpL2sKVxo=")
    
    # Update .env with the key
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s|ENCRYPTION_KEY=.*|ENCRYPTION_KEY=$ENCRYPTION_KEY|" .env
    else
        # Linux
        sed -i "s|ENCRYPTION_KEY=.*|ENCRYPTION_KEY=$ENCRYPTION_KEY|" .env
    fi
    
    echo "‚úì Generated encryption key"
fi

# Generate certificates if they don't exist
if [ ! -f certs/server.pem ]; then
    echo "Generating SSL certificates..."
    cd certs
    ./generate-certs.sh
    cd ..
    echo "‚úì Generated SSL certificates"
fi

# Start services
echo "Starting services..."
docker-compose up -d

# Wait for services
echo "Waiting for services to start..."
sleep 10

# Check service health
echo
echo "Checking services:"
docker-compose ps

echo
echo "=== TokenShield is ready! ==="
echo
echo "üñ•Ô∏è  GUI Dashboards:"
echo "   ‚Ä¢ React GUI:        http://localhost:8082  (Modern interface)"
echo "   ‚Ä¢ Legacy GUI:       http://localhost:8081  (Classic interface)"
echo
echo "üåê Core Services:"
echo "   ‚Ä¢ Demo App:         http://localhost       (E-commerce demo)"
echo "   ‚Ä¢ Management API:   http://localhost:8090  (REST API)"
echo "   ‚Ä¢ HAProxy Stats:    http://localhost:8404/stats"
echo
echo "üß™ Development/Testing:"
echo "   ‚Ä¢ Dummy Gateway:    http://localhost:9000  (Payment simulator)"
echo "   ‚Ä¢ Card Distributor: http://localhost:5001  (Card data API)"
echo
echo "üîß Internal Services:"
echo "   ‚Ä¢ Tokenizer HTTP:   http://localhost:8080  (Direct tokenization)"
echo "   ‚Ä¢ Squid Proxy:      http://localhost:3128  (Outbound proxy)"
echo "   ‚Ä¢ MySQL Database:   localhost:3306         (tokenshield/pciproxy123)"
echo
echo "üìã Test Credit Cards:"
echo "   ‚Ä¢ Visa:        4532015112830366"
echo "   ‚Ä¢ Mastercard:  5425233430109903"
echo "   ‚Ä¢ Amex:        378282246310005"
echo "   ‚Ä¢ Discover:    6011111111111117"
echo
echo "üöÄ Quick Actions:"
echo "   ‚Ä¢ Run './test-flow.sh' to see tokenization in action"
echo "   ‚Ä¢ Run 'docker-compose logs -f [service]' to view logs"
echo "   ‚Ä¢ Use CLI: './cli/tokenshield --help' for command-line interface"